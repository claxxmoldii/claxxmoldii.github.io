/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	space,
	text,
	toggle_class
} from '../web_modules/svelte/internal/index.mjs';

function create_fragment(ctx) {
	let nav;
	let ul;
	let li0;
	let a0;
	let t0;
	let t1;
	let li1;
	let a1;
	let t2;
	let t3;
	let li2;
	let a2;
	let t4;
	let t5;
	let li3;
	let a3;
	let t6;
	let mounted;
	let dispose;

	return {
		c() {
			nav = element("nav");
			ul = element("ul");
			li0 = element("li");
			a0 = element("a");
			t0 = text("home");
			t1 = space();
			li1 = element("li");
			a1 = element("a");
			t2 = text("posts");
			t3 = space();
			li2 = element("li");
			a2 = element("a");
			t4 = text("collections");
			t5 = space();
			li3 = element("li");
			a3 = element("a");
			t6 = text("about");
			this.h();
		},
		l(nodes) {
			nav = claim_element(nodes, "NAV", {});
			var nav_nodes = children(nav);
			ul = claim_element(nav_nodes, "UL", { class: true });
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			a0 = claim_element(li0_nodes, "A", { href: true, title: true, class: true });
			var a0_nodes = children(a0);
			t0 = claim_text(a0_nodes, "home");
			a0_nodes.forEach(detach);
			li0_nodes.forEach(detach);
			t1 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", { class: true });
			var li1_nodes = children(li1);
			a1 = claim_element(li1_nodes, "A", { href: true, title: true, class: true });
			var a1_nodes = children(a1);
			t2 = claim_text(a1_nodes, "posts");
			a1_nodes.forEach(detach);
			li1_nodes.forEach(detach);
			t3 = claim_space(ul_nodes);
			li2 = claim_element(ul_nodes, "LI", { class: true });
			var li2_nodes = children(li2);
			a2 = claim_element(li2_nodes, "A", { href: true, title: true, class: true });
			var a2_nodes = children(a2);
			t4 = claim_text(a2_nodes, "collections");
			a2_nodes.forEach(detach);
			li2_nodes.forEach(detach);
			t5 = claim_space(ul_nodes);
			li3 = claim_element(ul_nodes, "LI", { class: true });
			var li3_nodes = children(li3);
			a3 = claim_element(li3_nodes, "A", { href: true, title: true, class: true });
			var a3_nodes = children(a3);
			t6 = claim_text(a3_nodes, "about");
			a3_nodes.forEach(detach);
			li3_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			nav_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a0, "href", "/");
			attr(a0, "title", "home");
			attr(a0, "class", "svelte-10kxh5s");
			toggle_class(a0, "selected", /*current*/ ctx[0] === "home");
			attr(li0, "class", "svelte-10kxh5s");
			attr(a1, "href", "/posts");
			attr(a1, "title", "posts");
			attr(a1, "class", "svelte-10kxh5s");
			toggle_class(a1, "selected", /*current*/ ctx[0] === "posts");
			attr(li1, "class", "svelte-10kxh5s");
			attr(a2, "href", "/collections/toolbox");
			attr(a2, "title", "collections");
			attr(a2, "class", "svelte-10kxh5s");
			toggle_class(a2, "selected", /*current*/ ctx[0] === "collections");
			attr(li2, "class", "svelte-10kxh5s");
			attr(a3, "href", "/about");
			attr(a3, "title", "about");
			attr(a3, "class", "svelte-10kxh5s");
			toggle_class(a3, "selected", /*current*/ ctx[0] === "about");
			attr(li3, "class", "svelte-10kxh5s");
			attr(ul, "class", "menu isFlex");
		},
		m(target, anchor) {
			insert(target, nav, anchor);
			append(nav, ul);
			append(ul, li0);
			append(li0, a0);
			append(a0, t0);
			append(ul, t1);
			append(ul, li1);
			append(li1, a1);
			append(a1, t2);
			append(ul, t3);
			append(ul, li2);
			append(li2, a2);
			append(a2, t4);
			append(ul, t5);
			append(ul, li3);
			append(li3, a3);
			append(a3, t6);

			if (!mounted) {
				dispose = [
					listen(a0, "click", /*click_handler*/ ctx[1]),
					listen(a1, "click", /*click_handler_1*/ ctx[2]),
					listen(a2, "click", /*click_handler_2*/ ctx[3]),
					listen(a3, "click", /*click_handler_3*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*current*/ 1) {
				toggle_class(a0, "selected", /*current*/ ctx[0] === "home");
			}

			if (dirty & /*current*/ 1) {
				toggle_class(a1, "selected", /*current*/ ctx[0] === "posts");
			}

			if (dirty & /*current*/ 1) {
				toggle_class(a2, "selected", /*current*/ ctx[0] === "collections");
			}

			if (dirty & /*current*/ 1) {
				toggle_class(a3, "selected", /*current*/ ctx[0] === "about");
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(nav);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { current } = $$props;
	const click_handler = () => $$invalidate(0, current = "home");
	const click_handler_1 = () => $$invalidate(0, current = "posts");
	const click_handler_2 = () => $$invalidate(0, current = "collections");
	const click_handler_3 = () => $$invalidate(0, current = "about");

	$$self.$$set = $$props => {
		if ("current" in $$props) $$invalidate(0, current = $$props.current);
	};

	return [current, click_handler, click_handler_1, click_handler_2, click_handler_3];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { current: 0 });
	}
}

export default Component;