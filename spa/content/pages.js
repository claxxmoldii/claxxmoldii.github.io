/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from '../web_modules/svelte/internal/index.mjs';

import Nav from '../global/nav.js';
import RecentPosts from '../components/posts/recentposts.js';
import Completeposts from '../components/posts/completeposts.js';
import About from '../components/pages/about.js';

function create_if_block_3(ctx) {
	let completeposts;
	let current;

	completeposts = new Completeposts({
			props: {
				allPosts: /*allPosts*/ ctx[7],
				allContent: /*allContent*/ ctx[6]
			}
		});

	return {
		c() {
			create_component(completeposts.$$.fragment);
		},
		l(nodes) {
			claim_component(completeposts.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(completeposts, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const completeposts_changes = {};
			if (dirty & /*allPosts*/ 128) completeposts_changes.allPosts = /*allPosts*/ ctx[7];
			if (dirty & /*allContent*/ 64) completeposts_changes.allContent = /*allContent*/ ctx[6];
			completeposts.$set(completeposts_changes);
		},
		i(local) {
			if (current) return;
			transition_in(completeposts.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(completeposts.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(completeposts, detaching);
		}
	};
}

// (27:37) 
function create_if_block_2(ctx) {
	let h3;
	let t;

	return {
		c() {
			h3 = element("h3");
			t = text("contact!");
			this.h();
		},
		l(nodes) {
			h3 = claim_element(nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t = claim_text(h3_nodes, "contact!");
			h3_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h3, "class", "svelte-rzr2a0");
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			append(h3, t);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(h3);
		}
	};
}

// (25:35) 
function create_if_block_1(ctx) {
	let about;
	let current;

	about = new About({
			props: {
				title: /*title*/ ctx[0],
				body: /*body*/ ctx[3],
				body2: /*body2*/ ctx[4],
				body3: /*body3*/ ctx[5],
				pic: /*pic*/ ctx[1]
			}
		});

	return {
		c() {
			create_component(about.$$.fragment);
		},
		l(nodes) {
			claim_component(about.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(about, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const about_changes = {};
			if (dirty & /*title*/ 1) about_changes.title = /*title*/ ctx[0];
			if (dirty & /*body*/ 8) about_changes.body = /*body*/ ctx[3];
			if (dirty & /*body2*/ 16) about_changes.body2 = /*body2*/ ctx[4];
			if (dirty & /*body3*/ 32) about_changes.body3 = /*body3*/ ctx[5];
			if (dirty & /*pic*/ 2) about_changes.pic = /*pic*/ ctx[1];
			about.$set(about_changes);
		},
		i(local) {
			if (current) return;
			transition_in(about.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(about.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(about, detaching);
		}
	};
}

// (23:6) {#if current == "posts" }
function create_if_block(ctx) {
	let recentposts;
	let current;

	recentposts = new RecentPosts({
			props: {
				allPosts: /*allPosts*/ ctx[7],
				allContent: /*allContent*/ ctx[6]
			}
		});

	return {
		c() {
			create_component(recentposts.$$.fragment);
		},
		l(nodes) {
			claim_component(recentposts.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(recentposts, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const recentposts_changes = {};
			if (dirty & /*allPosts*/ 128) recentposts_changes.allPosts = /*allPosts*/ ctx[7];
			if (dirty & /*allContent*/ 64) recentposts_changes.allContent = /*allContent*/ ctx[6];
			recentposts.$set(recentposts_changes);
		},
		i(local) {
			if (current) return;
			transition_in(recentposts.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(recentposts.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(recentposts, detaching);
		}
	};
}

function create_fragment(ctx) {
	let main;
	let section0;
	let header;
	let h1;
	let t0;
	let t1;
	let section1;
	let div0;
	let nav;
	let t2;
	let div1;
	let current_block_type_index;
	let if_block;
	let current;
	nav = new Nav({ props: { current: /*current*/ ctx[2] } });
	const if_block_creators = [create_if_block, create_if_block_1, create_if_block_2, create_if_block_3];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*current*/ ctx[2] == "posts") return 0;
		if (/*current*/ ctx[2] == "about") return 1;
		if (/*current*/ ctx[2] == "contact") return 2;
		if (/*current*/ ctx[2] == "completeposts") return 3;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx, -1))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	return {
		c() {
			main = element("main");
			section0 = element("section");
			header = element("header");
			h1 = element("h1");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			section1 = element("section");
			div0 = element("div");
			create_component(nav.$$.fragment);
			t2 = space();
			div1 = element("div");
			if (if_block) if_block.c();
			this.h();
		},
		l(nodes) {
			main = claim_element(nodes, "MAIN", { class: true });
			var main_nodes = children(main);
			section0 = claim_element(main_nodes, "SECTION", { class: true });
			var section0_nodes = children(section0);
			header = claim_element(section0_nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			h1 = claim_element(header_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, /*title*/ ctx[0]);
			h1_nodes.forEach(detach);
			header_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t1 = claim_space(main_nodes);
			section1 = claim_element(main_nodes, "SECTION", { class: true });
			var section1_nodes = children(section1);
			div0 = claim_element(section1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(nav.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach);
			t2 = claim_space(section1_nodes);
			div1 = claim_element(section1_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if (if_block) if_block.l(div1_nodes);
			div1_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			main_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h1, "class", "svelte-rzr2a0");
			attr(header, "class", "isGrid svelte-rzr2a0");
			attr(section0, "class", "upperJones isGrid svelte-rzr2a0");
			attr(div0, "class", "isNav isGrid svelte-rzr2a0");
			attr(div1, "class", "isContent svelte-rzr2a0");
			attr(section1, "class", "lowerJones svelte-rzr2a0");
			attr(main, "class", "isGrid svelte-rzr2a0");
		},
		m(target, anchor) {
			insert(target, main, anchor);
			append(main, section0);
			append(section0, header);
			append(header, h1);
			append(h1, t0);
			append(main, t1);
			append(main, section1);
			append(section1, div0);
			mount_component(nav, div0, null);
			append(section1, t2);
			append(section1, div1);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(div1, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*title*/ 1) set_data(t0, /*title*/ ctx[0]);
			const nav_changes = {};
			if (dirty & /*current*/ 4) nav_changes.current = /*current*/ ctx[2];
			nav.$set(nav_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(div1, null);
				} else {
					if_block = null;
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(nav.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(nav.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(main);
			destroy_component(nav);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props,
		{ pic } = $$props,
		{ description } = $$props,
		{ content } = $$props,
		{ current } = $$props,
		{ body } = $$props,
		{ body2 } = $$props,
		{ body3 } = $$props,
		{ allContent } = $$props,
		{ components } = $$props,
		{ allPosts } = $$props,
		{ sub } = $$props;

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("pic" in $$props) $$invalidate(1, pic = $$props.pic);
		if ("description" in $$props) $$invalidate(8, description = $$props.description);
		if ("content" in $$props) $$invalidate(9, content = $$props.content);
		if ("current" in $$props) $$invalidate(2, current = $$props.current);
		if ("body" in $$props) $$invalidate(3, body = $$props.body);
		if ("body2" in $$props) $$invalidate(4, body2 = $$props.body2);
		if ("body3" in $$props) $$invalidate(5, body3 = $$props.body3);
		if ("allContent" in $$props) $$invalidate(6, allContent = $$props.allContent);
		if ("components" in $$props) $$invalidate(10, components = $$props.components);
		if ("allPosts" in $$props) $$invalidate(7, allPosts = $$props.allPosts);
		if ("sub" in $$props) $$invalidate(11, sub = $$props.sub);
	};

	return [
		title,
		pic,
		current,
		body,
		body2,
		body3,
		allContent,
		allPosts,
		description,
		content,
		components,
		sub
	];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			title: 0,
			pic: 1,
			description: 8,
			content: 9,
			current: 2,
			body: 3,
			body2: 4,
			body3: 5,
			allContent: 6,
			components: 10,
			allPosts: 7,
			sub: 11
		});
	}
}

export default Component;