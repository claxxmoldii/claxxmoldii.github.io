/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from '../web_modules/svelte/internal/index.mjs';

import BuildLog from '../components/behindthescenes/buildlog.js';
import Reproduction from '../components/behindthescenes/reproduction.js';
import Attributions from '../components/behindthescenes/attributions.js';
import Issues from '../components/behindthescenes/issues.js';

function create_if_block_3(ctx) {
	let buildlog;
	let current;
	buildlog = new BuildLog({});

	return {
		c() {
			create_component(buildlog.$$.fragment);
		},
		l(nodes) {
			claim_component(buildlog.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(buildlog, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(buildlog.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(buildlog.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(buildlog, detaching);
		}
	};
}

// (21:4) {#if component == "reproduction"}
function create_if_block_2(ctx) {
	let reproduction;
	let current;
	reproduction = new Reproduction({});

	return {
		c() {
			create_component(reproduction.$$.fragment);
		},
		l(nodes) {
			claim_component(reproduction.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(reproduction, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(reproduction.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(reproduction.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(reproduction, detaching);
		}
	};
}

// (25:4) {#if component == "attributions"}
function create_if_block_1(ctx) {
	let attributions;
	let current;
	attributions = new Attributions({});

	return {
		c() {
			create_component(attributions.$$.fragment);
		},
		l(nodes) {
			claim_component(attributions.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(attributions, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(attributions.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(attributions.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(attributions, detaching);
		}
	};
}

// (29:4) {#if component == "issues"}
function create_if_block(ctx) {
	let issues;
	let current;
	issues = new Issues({});

	return {
		c() {
			create_component(issues.$$.fragment);
		},
		l(nodes) {
			claim_component(issues.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(issues, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(issues.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(issues.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(issues, detaching);
		}
	};
}

function create_fragment(ctx) {
	let section;
	let header;
	let h1;
	let t0;
	let t1;
	let h5;
	let t2;
	let t3;
	let div;
	let t4;
	let t5;
	let t6;
	let current;
	let if_block0 = /*component*/ ctx[2] == "buildlog" && create_if_block_3(ctx);
	let if_block1 = /*component*/ ctx[2] == "reproduction" && create_if_block_2(ctx);
	let if_block2 = /*component*/ ctx[2] == "attributions" && create_if_block_1(ctx);
	let if_block3 = /*component*/ ctx[2] == "issues" && create_if_block(ctx);

	return {
		c() {
			section = element("section");
			header = element("header");
			h1 = element("h1");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			h5 = element("h5");
			t2 = text(/*tagline*/ ctx[1]);
			t3 = space();
			div = element("div");
			if (if_block0) if_block0.c();
			t4 = space();
			if (if_block1) if_block1.c();
			t5 = space();
			if (if_block2) if_block2.c();
			t6 = space();
			if (if_block3) if_block3.c();
			this.h();
		},
		l(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			header = claim_element(section_nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			h1 = claim_element(header_nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, /*title*/ ctx[0]);
			h1_nodes.forEach(detach);
			t1 = claim_space(header_nodes);
			h5 = claim_element(header_nodes, "H5", {});
			var h5_nodes = children(h5);
			t2 = claim_text(h5_nodes, /*tagline*/ ctx[1]);
			h5_nodes.forEach(detach);
			header_nodes.forEach(detach);
			t3 = claim_space(section_nodes);
			div = claim_element(section_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block0) if_block0.l(div_nodes);
			t4 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t5 = claim_space(div_nodes);
			if (if_block2) if_block2.l(div_nodes);
			t6 = claim_space(div_nodes);
			if (if_block3) if_block3.l(div_nodes);
			div_nodes.forEach(detach);
			section_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(header, "class", "svelte-6lsmv4");
			attr(div, "class", "components svelte-6lsmv4");
			attr(section, "class", "bts container isGrid svelte-6lsmv4");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, header);
			append(header, h1);
			append(h1, t0);
			append(header, t1);
			append(header, h5);
			append(h5, t2);
			append(section, t3);
			append(section, div);
			if (if_block0) if_block0.m(div, null);
			append(div, t4);
			if (if_block1) if_block1.m(div, null);
			append(div, t5);
			if (if_block2) if_block2.m(div, null);
			append(div, t6);
			if (if_block3) if_block3.m(div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*title*/ 1) set_data(t0, /*title*/ ctx[0]);
			if (!current || dirty & /*tagline*/ 2) set_data(t2, /*tagline*/ ctx[1]);

			if (/*component*/ ctx[2] == "buildlog") {
				if (if_block0) {
					if (dirty & /*component*/ 4) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t4);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*component*/ ctx[2] == "reproduction") {
				if (if_block1) {
					if (dirty & /*component*/ 4) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t5);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*component*/ ctx[2] == "attributions") {
				if (if_block2) {
					if (dirty & /*component*/ 4) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_1(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div, t6);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*component*/ ctx[2] == "issues") {
				if (if_block3) {
					if (dirty & /*component*/ 4) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div, null);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(if_block3);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(if_block3);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props,
		{ tagline } = $$props,
		{ description } = $$props,
		{ content } = $$props,
		{ current } = $$props,
		{ body } = $$props,
		{ component } = $$props;

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("tagline" in $$props) $$invalidate(1, tagline = $$props.tagline);
		if ("description" in $$props) $$invalidate(3, description = $$props.description);
		if ("content" in $$props) $$invalidate(4, content = $$props.content);
		if ("current" in $$props) $$invalidate(5, current = $$props.current);
		if ("body" in $$props) $$invalidate(6, body = $$props.body);
		if ("component" in $$props) $$invalidate(2, component = $$props.component);
	};

	return [title, tagline, component, description, content, current, body];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			title: 0,
			tagline: 1,
			description: 3,
			content: 4,
			current: 5,
			body: 6,
			component: 2
		});
	}
}

export default Component;