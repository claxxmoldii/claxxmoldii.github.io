/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	text,
	transition_in,
	transition_out
} from '../web_modules/svelte/internal/index.mjs';

import ToolBox from '../components/collections/toolbox.js';
import NeatTools from '../components/collections/neattools.js';
import BingeWatch from '../components/collections/bingewatch.js';
import ToolCart from '../components/collections/toolcart.js';
import Nav from '../global/nav.js';
import CollectionNav from '../components/collections/collectionnav.js';

function create_if_block_3(ctx) {
	let toolbox;
	let current;

	toolbox = new ToolBox({
			props: {
				title: /*title*/ ctx[0],
				tagline: /*tagline*/ ctx[1]
			}
		});

	return {
		c() {
			create_component(toolbox.$$.fragment);
		},
		l(nodes) {
			claim_component(toolbox.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(toolbox, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const toolbox_changes = {};
			if (dirty & /*title*/ 1) toolbox_changes.title = /*title*/ ctx[0];
			if (dirty & /*tagline*/ 2) toolbox_changes.tagline = /*tagline*/ ctx[1];
			toolbox.$set(toolbox_changes);
		},
		i(local) {
			if (current) return;
			transition_in(toolbox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(toolbox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(toolbox, detaching);
		}
	};
}

// (34:8) {#if collection == "neattools"}
function create_if_block_2(ctx) {
	let div;
	let neattools;
	let current;

	neattools = new NeatTools({
			props: {
				title: /*title*/ ctx[0],
				tagline: /*tagline*/ ctx[1]
			}
		});

	return {
		c() {
			div = element("div");
			create_component(neattools.$$.fragment);
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(neattools.$$.fragment, div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "neattools svelte-wz357b");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(neattools, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const neattools_changes = {};
			if (dirty & /*title*/ 1) neattools_changes.title = /*title*/ ctx[0];
			if (dirty & /*tagline*/ 2) neattools_changes.tagline = /*tagline*/ ctx[1];
			neattools.$set(neattools_changes);
		},
		i(local) {
			if (current) return;
			transition_in(neattools.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(neattools.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(neattools);
		}
	};
}

// (40:8) {#if collection == "toolcart"}
function create_if_block_1(ctx) {
	let div;
	let toolcart;
	let current;

	toolcart = new ToolCart({
			props: {
				title: /*title*/ ctx[0],
				tagline: /*tagline*/ ctx[1]
			}
		});

	return {
		c() {
			div = element("div");
			create_component(toolcart.$$.fragment);
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(toolcart.$$.fragment, div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "toolcart svelte-wz357b");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(toolcart, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const toolcart_changes = {};
			if (dirty & /*title*/ 1) toolcart_changes.title = /*title*/ ctx[0];
			if (dirty & /*tagline*/ 2) toolcart_changes.tagline = /*tagline*/ ctx[1];
			toolcart.$set(toolcart_changes);
		},
		i(local) {
			if (current) return;
			transition_in(toolcart.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(toolcart.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(toolcart);
		}
	};
}

// (46:8) {#if collection == "bingewatch"}
function create_if_block(ctx) {
	let div;
	let bingewatch;
	let current;

	bingewatch = new BingeWatch({
			props: {
				title: /*title*/ ctx[0],
				tagline: /*tagline*/ ctx[1]
			}
		});

	return {
		c() {
			div = element("div");
			create_component(bingewatch.$$.fragment);
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(bingewatch.$$.fragment, div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "bingewatch svelte-wz357b");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(bingewatch, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const bingewatch_changes = {};
			if (dirty & /*title*/ 1) bingewatch_changes.title = /*title*/ ctx[0];
			if (dirty & /*tagline*/ 2) bingewatch_changes.tagline = /*tagline*/ ctx[1];
			bingewatch.$set(bingewatch_changes);
		},
		i(local) {
			if (current) return;
			transition_in(bingewatch.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(bingewatch.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(bingewatch);
		}
	};
}

function create_fragment(ctx) {
	let main;
	let section0;
	let header;
	let h1;
	let t0;
	let t1;
	let section1;
	let div0;
	let nav;
	let t2;
	let div3;
	let div1;
	let collectionnav;
	let t3;
	let div2;
	let t4;
	let t5;
	let t6;
	let current;
	nav = new Nav({ props: { current: /*current*/ ctx[2] } });

	collectionnav = new CollectionNav({
			props: { collection: /*collection*/ ctx[3] }
		});

	let if_block0 = /*collection*/ ctx[3] == "toolbox" && create_if_block_3(ctx);
	let if_block1 = /*collection*/ ctx[3] == "neattools" && create_if_block_2(ctx);
	let if_block2 = /*collection*/ ctx[3] == "toolcart" && create_if_block_1(ctx);
	let if_block3 = /*collection*/ ctx[3] == "bingewatch" && create_if_block(ctx);

	return {
		c() {
			main = element("main");
			section0 = element("section");
			header = element("header");
			h1 = element("h1");
			t0 = text("collections");
			t1 = space();
			section1 = element("section");
			div0 = element("div");
			create_component(nav.$$.fragment);
			t2 = space();
			div3 = element("div");
			div1 = element("div");
			create_component(collectionnav.$$.fragment);
			t3 = space();
			div2 = element("div");
			if (if_block0) if_block0.c();
			t4 = space();
			if (if_block1) if_block1.c();
			t5 = space();
			if (if_block2) if_block2.c();
			t6 = space();
			if (if_block3) if_block3.c();
			this.h();
		},
		l(nodes) {
			main = claim_element(nodes, "MAIN", { class: true });
			var main_nodes = children(main);
			section0 = claim_element(main_nodes, "SECTION", { class: true });
			var section0_nodes = children(section0);
			header = claim_element(section0_nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			h1 = claim_element(header_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "collections");
			h1_nodes.forEach(detach);
			header_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t1 = claim_space(main_nodes);
			section1 = claim_element(main_nodes, "SECTION", { class: true });
			var section1_nodes = children(section1);
			div0 = claim_element(section1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(nav.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach);
			t2 = claim_space(section1_nodes);
			div3 = claim_element(section1_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(collectionnav.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach);
			t3 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			if (if_block0) if_block0.l(div2_nodes);
			t4 = claim_space(div2_nodes);
			if (if_block1) if_block1.l(div2_nodes);
			t5 = claim_space(div2_nodes);
			if (if_block2) if_block2.l(div2_nodes);
			t6 = claim_space(div2_nodes);
			if (if_block3) if_block3.l(div2_nodes);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			main_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h1, "class", "svelte-wz357b");
			attr(header, "class", "isGrid svelte-wz357b");
			attr(section0, "class", "upperJones isGrid svelte-wz357b");
			attr(div0, "class", "isNav isGrid svelte-wz357b");
			attr(div1, "class", "collect-nav  svelte-wz357b");
			attr(div2, "class", "collection  svelte-wz357b");
			attr(div3, "class", "isGrid isContent  svelte-wz357b");
			attr(section1, "class", "lowerJones svelte-wz357b");
			attr(main, "class", "isGrid svelte-wz357b");
		},
		m(target, anchor) {
			insert(target, main, anchor);
			append(main, section0);
			append(section0, header);
			append(header, h1);
			append(h1, t0);
			append(main, t1);
			append(main, section1);
			append(section1, div0);
			mount_component(nav, div0, null);
			append(section1, t2);
			append(section1, div3);
			append(div3, div1);
			mount_component(collectionnav, div1, null);
			append(div3, t3);
			append(div3, div2);
			if (if_block0) if_block0.m(div2, null);
			append(div2, t4);
			if (if_block1) if_block1.m(div2, null);
			append(div2, t5);
			if (if_block2) if_block2.m(div2, null);
			append(div2, t6);
			if (if_block3) if_block3.m(div2, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const nav_changes = {};
			if (dirty & /*current*/ 4) nav_changes.current = /*current*/ ctx[2];
			nav.$set(nav_changes);
			const collectionnav_changes = {};
			if (dirty & /*collection*/ 8) collectionnav_changes.collection = /*collection*/ ctx[3];
			collectionnav.$set(collectionnav_changes);

			if (/*collection*/ ctx[3] == "toolbox") {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*collection*/ 8) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div2, t4);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*collection*/ ctx[3] == "neattools") {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*collection*/ 8) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div2, t5);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*collection*/ ctx[3] == "toolcart") {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*collection*/ 8) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_1(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div2, t6);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*collection*/ ctx[3] == "bingewatch") {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty & /*collection*/ 8) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div2, null);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(nav.$$.fragment, local);
			transition_in(collectionnav.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(if_block3);
			current = true;
		},
		o(local) {
			transition_out(nav.$$.fragment, local);
			transition_out(collectionnav.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(if_block3);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(main);
			destroy_component(nav);
			destroy_component(collectionnav);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props,
		{ tagline } = $$props,
		{ description } = $$props,
		{ content } = $$props,
		{ current } = $$props,
		{ body } = $$props,
		{ collection } = $$props;

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("tagline" in $$props) $$invalidate(1, tagline = $$props.tagline);
		if ("description" in $$props) $$invalidate(4, description = $$props.description);
		if ("content" in $$props) $$invalidate(5, content = $$props.content);
		if ("current" in $$props) $$invalidate(2, current = $$props.current);
		if ("body" in $$props) $$invalidate(6, body = $$props.body);
		if ("collection" in $$props) $$invalidate(3, collection = $$props.collection);
	};

	return [title, tagline, current, collection, description, content, body];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			title: 0,
			tagline: 1,
			description: 4,
			content: 5,
			current: 2,
			body: 6,
			collection: 3
		});
	}
}

export default Component;