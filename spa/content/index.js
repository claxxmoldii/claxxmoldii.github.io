/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from '../web_modules/svelte/internal/index.mjs';

import Nav from '../global/nav.js';

function create_fragment(ctx) {
	let main;
	let section0;
	let header;
	let div0;
	let h1;
	let a;
	let t0;
	let t1;
	let h3;
	let t2_value = /*tagline*/ ctx[2][/*tagNum*/ ctx[3](0, /*tagline*/ ctx[2].length - 1)] + "";
	let t2;
	let t3;
	let section1;
	let div1;
	let nav;
	let current;
	nav = new Nav({ props: { current: /*current*/ ctx[1] } });

	return {
		c() {
			main = element("main");
			section0 = element("section");
			header = element("header");
			div0 = element("div");
			h1 = element("h1");
			a = element("a");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			h3 = element("h3");
			t2 = text(t2_value);
			t3 = space();
			section1 = element("section");
			div1 = element("div");
			create_component(nav.$$.fragment);
			this.h();
		},
		l(nodes) {
			main = claim_element(nodes, "MAIN", { class: true });
			var main_nodes = children(main);
			section0 = claim_element(main_nodes, "SECTION", { class: true });
			var section0_nodes = children(section0);
			header = claim_element(section0_nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			div0 = claim_element(header_nodes, "DIV", {});
			var div0_nodes = children(div0);
			h1 = claim_element(div0_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			a = claim_element(h1_nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, /*title*/ ctx[0]);
			a_nodes.forEach(detach);
			h1_nodes.forEach(detach);
			t1 = claim_space(div0_nodes);
			h3 = claim_element(div0_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t2 = claim_text(h3_nodes, t2_value);
			h3_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			header_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t3 = claim_space(main_nodes);
			section1 = claim_element(main_nodes, "SECTION", { class: true });
			var section1_nodes = children(section1);
			div1 = claim_element(section1_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(nav.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			main_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "class", "title svelte-1r1ozzw");
			attr(a, "href", "/");
			attr(h1, "class", "svelte-1r1ozzw");
			attr(h3, "class", "svelte-1r1ozzw");
			attr(header, "class", "isGrid svelte-1r1ozzw");
			attr(section0, "class", "upperJones isGrid svelte-1r1ozzw");
			attr(div1, "class", "isNav isGrid svelte-1r1ozzw");
			attr(section1, "class", "lowerJones isGrid svelte-1r1ozzw");
			attr(main, "class", "isGrid svelte-1r1ozzw");
		},
		m(target, anchor) {
			insert(target, main, anchor);
			append(main, section0);
			append(section0, header);
			append(header, div0);
			append(div0, h1);
			append(h1, a);
			append(a, t0);
			append(div0, t1);
			append(div0, h3);
			append(h3, t2);
			append(main, t3);
			append(main, section1);
			append(section1, div1);
			mount_component(nav, div1, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*title*/ 1) set_data(t0, /*title*/ ctx[0]);
			if ((!current || dirty & /*tagline*/ 4) && t2_value !== (t2_value = /*tagline*/ ctx[2][/*tagNum*/ ctx[3](0, /*tagline*/ ctx[2].length - 1)] + "")) set_data(t2, t2_value);
			const nav_changes = {};
			if (dirty & /*current*/ 2) nav_changes.current = /*current*/ ctx[1];
			nav.$set(nav_changes);
		},
		i(local) {
			if (current) return;
			transition_in(nav.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(nav.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(main);
			destroy_component(nav);
		}
	};
}

let postsPerPage = 3;

function instance($$self, $$props, $$invalidate) {
	let currentPage;
	let postRangeHigh;
	let postRangeLow;

	let { title } = $$props,
		{ intro } = $$props,
		{ components } = $$props,
		{ content } = $$props,
		{ allContent } = $$props,
		{ current } = $$props,
		{ tagline } = $$props;

	const tagNum = function (min, max) {
		min = Math.ceil(min);
		max = Math.floor(max);
		return Math.floor(Math.random() * (max - min + 1) + min);
	}; //The maximum is inclusive and the minimum is inclusive

	let allPosts = allContent.filter(content => content.type == "blog");
	let totalPosts = allPosts.length;
	let totalPages = Math.ceil(totalPosts / postsPerPage);

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("intro" in $$props) $$invalidate(4, intro = $$props.intro);
		if ("components" in $$props) $$invalidate(5, components = $$props.components);
		if ("content" in $$props) $$invalidate(6, content = $$props.content);
		if ("allContent" in $$props) $$invalidate(7, allContent = $$props.allContent);
		if ("current" in $$props) $$invalidate(1, current = $$props.current);
		if ("tagline" in $$props) $$invalidate(2, tagline = $$props.tagline);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*content*/ 64) {
			$: $$invalidate(8, currentPage = content.pager);
		}

		if ($$self.$$.dirty & /*currentPage*/ 256) {
			$: $$invalidate(9, postRangeHigh = currentPage * postsPerPage);
		}

		if ($$self.$$.dirty & /*postRangeHigh*/ 512) {
			$: postRangeLow = postRangeHigh - postsPerPage;
		}
	};

	return [
		title,
		current,
		tagline,
		tagNum,
		intro,
		components,
		content,
		allContent,
		currentPage,
		postRangeHigh
	];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			title: 0,
			intro: 4,
			components: 5,
			content: 6,
			allContent: 7,
			current: 1,
			tagline: 2
		});
	}
}

export default Component;