/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	noop,
	safe_not_equal,
	space,
	text
} from '../../web_modules/svelte/internal/index.mjs';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	child_ctx[4] = i;
	return child_ctx;
}

// (11:6) {#if i >= 0 && i < 3}
function create_if_block(ctx) {
	let li;
	let t0_value = /*post*/ ctx[2].fields.date + "";
	let t0;
	let t1;
	let a;
	let t2_value = /*post*/ ctx[2].fields.title + "";
	let t2;
	let a_href_value;

	return {
		c() {
			li = element("li");
			t0 = text(t0_value);
			t1 = space();
			a = element("a");
			t2 = text(t2_value);
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			t0 = claim_text(li_nodes, t0_value);
			t1 = claim_space(li_nodes);
			a = claim_element(li_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t2 = claim_text(a_nodes, t2_value);
			a_nodes.forEach(detach);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", a_href_value = /*post*/ ctx[2].path);
			attr(a, "class", "svelte-xo3bau");
			attr(li, "class", "svelte-xo3bau");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, t0);
			append(li, t1);
			append(li, a);
			append(a, t2);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

// (10:4) {#each allPosts as post, i}
function create_each_block(ctx) {
	let if_block_anchor;
	let if_block = /*i*/ ctx[4] >= 0 && /*i*/ ctx[4] < 3 && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*i*/ ctx[4] >= 0 && /*i*/ ctx[4] < 3) if_block.p(ctx, dirty);
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment(ctx) {
	let section;
	let h3;
	let t0;
	let t1;
	let ul;
	let t2;
	let hr;
	let each_value = /*allPosts*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			section = element("section");
			h3 = element("h3");
			t0 = text("Recent blog posts:");
			t1 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			hr = element("hr");
			this.h();
		},
		l(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			h3 = claim_element(section_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Recent blog posts:");
			h3_nodes.forEach(detach);
			t1 = claim_space(section_nodes);
			ul = claim_element(section_nodes, "UL", {});
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach);
			section_nodes.forEach(detach);
			t2 = claim_space(nodes);
			hr = claim_element(nodes, "HR", { class: true });
			this.h();
		},
		h() {
			attr(h3, "class", "svelte-xo3bau");
			attr(section, "class", "svelte-xo3bau");
			attr(hr, "class", "sep svelte-xo3bau");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, h3);
			append(h3, t0);
			append(section, t1);
			append(section, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			insert(target, t2, anchor);
			insert(target, hr, anchor);
		},
		p(ctx, [dirty]) {
			if (dirty & /*allPosts*/ 1) {
				each_value = /*allPosts*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t2);
			if (detaching) detach(hr);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { allContent } = $$props;
	let allPosts = allContent.filter(content => content.type == "posts");

	$$self.$$set = $$props => {
		if ("allContent" in $$props) $$invalidate(1, allContent = $$props.allContent);
	};

	return [allPosts, allContent];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { allContent: 1 });
	}
}

export default Component;