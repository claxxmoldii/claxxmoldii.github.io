/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from '../../web_modules/svelte/internal/index.mjs';

import { sortByDate } from '../../scripts/sort_by_date.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	child_ctx[12] = i;
	return child_ctx;
}

// (38:6) {#if i >= 0 && i < numPerPage}
function create_if_block_2(ctx) {
	let li;
	let t0_value = /*post*/ ctx[10].fields.date.replaceAll("/", ".") + "";
	let t0;
	let t1;
	let a;
	let t2_value = /*post*/ ctx[10].fields.title + "";
	let t2;
	let a_href_value;

	return {
		c() {
			li = element("li");
			t0 = text(t0_value);
			t1 = space();
			a = element("a");
			t2 = text(t2_value);
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			t0 = claim_text(li_nodes, t0_value);
			t1 = claim_space(li_nodes);
			a = claim_element(li_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t2 = claim_text(a_nodes, t2_value);
			a_nodes.forEach(detach);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", a_href_value = /*post*/ ctx[10].path);
			attr(a, "class", "svelte-yxbq6o");
			attr(li, "class", "svelte-yxbq6o");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, t0);
			append(li, t1);
			append(li, a);
			append(a, t2);
		},
		p(ctx, dirty) {
			if (dirty & /*somePosts*/ 2 && t0_value !== (t0_value = /*post*/ ctx[10].fields.date.replaceAll("/", ".") + "")) set_data(t0, t0_value);
			if (dirty & /*somePosts*/ 2 && t2_value !== (t2_value = /*post*/ ctx[10].fields.title + "")) set_data(t2, t2_value);

			if (dirty & /*somePosts*/ 2 && a_href_value !== (a_href_value = /*post*/ ctx[10].path)) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

// (37:4) {#each somePosts as post, i}
function create_each_block(ctx) {
	let if_block_anchor;
	let if_block = /*i*/ ctx[12] >= 0 && /*i*/ ctx[12] < numPerPage && create_if_block_2(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*i*/ ctx[12] >= 0 && /*i*/ ctx[12] < numPerPage) if_block.p(ctx, dirty);
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (47:4) {:else}
function create_else_block_1(ctx) {
	let a;
	let t;
	let mounted;
	let dispose;

	return {
		c() {
			a = element("a");
			t = text("<");
			this.h();
		},
		l(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, "<");
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", "#");
			attr(a, "class", "svelte-yxbq6o");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t);

			if (!mounted) {
				dispose = listen(a, "click", /*decrementer*/ ctx[4]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(a);
			mounted = false;
			dispose();
		}
	};
}

// (45:4) {#if currentPage == 1 }
function create_if_block_1(ctx) {
	let a;
	let t;

	return {
		c() {
			a = element("a");
			t = text("<");
			this.h();
		},
		l(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, "<");
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", "#");
			attr(a, "class", "limit svelte-yxbq6o");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(a);
		}
	};
}

// (53:4) {:else}
function create_else_block(ctx) {
	let a;
	let t;
	let mounted;
	let dispose;

	return {
		c() {
			a = element("a");
			t = text(">");
			this.h();
		},
		l(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, ">");
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", "#");
			attr(a, "class", "svelte-yxbq6o");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t);

			if (!mounted) {
				dispose = listen(a, "click", /*incrementer*/ ctx[3]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(a);
			mounted = false;
			dispose();
		}
	};
}

// (51:4) {#if currentPage == numOfPages }
function create_if_block(ctx) {
	let a;
	let t;

	return {
		c() {
			a = element("a");
			t = text(">");
			this.h();
		},
		l(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, ">");
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", "#");
			attr(a, "class", "limit svelte-yxbq6o");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(a);
		}
	};
}

function create_fragment(ctx) {
	let section;
	let h3;
	let t0;
	let t1;
	let ul;
	let t2;
	let hr;
	let t3;
	let div;
	let t4;
	let span;
	let t5;
	let t6;
	let each_value = /*somePosts*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	function select_block_type(ctx, dirty) {
		if (/*currentPage*/ ctx[0] == 1) return create_if_block_1;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block0 = current_block_type(ctx);

	function select_block_type_1(ctx, dirty) {
		if (/*currentPage*/ ctx[0] == /*numOfPages*/ ctx[2]) return create_if_block;
		return create_else_block;
	}

	let current_block_type_1 = select_block_type_1(ctx, -1);
	let if_block1 = current_block_type_1(ctx);

	return {
		c() {
			section = element("section");
			h3 = element("h3");
			t0 = text("complete posts");
			t1 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			hr = element("hr");
			t3 = space();
			div = element("div");
			if_block0.c();
			t4 = space();
			span = element("span");
			t5 = text(". . .");
			t6 = space();
			if_block1.c();
			this.h();
		},
		l(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			h3 = claim_element(section_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "complete posts");
			h3_nodes.forEach(detach);
			t1 = claim_space(section_nodes);
			ul = claim_element(section_nodes, "UL", {});
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach);
			t2 = claim_space(section_nodes);
			hr = claim_element(section_nodes, "HR", { class: true });
			t3 = claim_space(section_nodes);
			div = claim_element(section_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if_block0.l(div_nodes);
			t4 = claim_space(div_nodes);
			span = claim_element(div_nodes, "SPAN", {});
			var span_nodes = children(span);
			t5 = claim_text(span_nodes, ". . .");
			span_nodes.forEach(detach);
			t6 = claim_space(div_nodes);
			if_block1.l(div_nodes);
			div_nodes.forEach(detach);
			section_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h3, "class", "svelte-yxbq6o");
			attr(hr, "class", "sep svelte-yxbq6o");
			attr(div, "class", "pejjinetaur svelte-yxbq6o");
			attr(section, "class", "svelte-yxbq6o");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, h3);
			append(h3, t0);
			append(section, t1);
			append(section, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			append(section, t2);
			append(section, hr);
			append(section, t3);
			append(section, div);
			if_block0.m(div, null);
			append(div, t4);
			append(div, span);
			append(span, t5);
			append(div, t6);
			if_block1.m(div, null);
		},
		p(ctx, [dirty]) {
			if (dirty & /*somePosts, numPerPage*/ 2) {
				each_value = /*somePosts*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(div, t4);
				}
			}

			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx, dirty)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type_1(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(div, null);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
			destroy_each(each_blocks, detaching);
			if_block0.d();
			if_block1.d();
		}
	};
}

let numPerPage = 5;

function instance($$self, $$props, $$invalidate) {
	let somePosts;
	let { allContent } = $$props;
	let allPosts = sortByDate(allContent.filter(content => content.type == "posts"));

	// let allPosts = everyPosts.reverse();//latest first
	let postStart = 0;

	let numOfItems = allPosts.length;
	let currentPage = 1;
	let numOfPages = Math.ceil(numOfItems / numPerPage);
	let postEnd;

	function incrementer() {
		$$invalidate(0, currentPage += 1);
	}

	

	function decrementer() {
		$$invalidate(0, currentPage -= 1);
	}

	

	$$self.$$set = $$props => {
		if ("allContent" in $$props) $$invalidate(5, allContent = $$props.allContent);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*currentPage*/ 1) {
			$: $$invalidate(6, postStart = (currentPage - 1) * numPerPage);
		}

		if ($$self.$$.dirty & /*postStart*/ 64) {
			$: $$invalidate(7, postEnd = postStart + numPerPage);
		}

		if ($$self.$$.dirty & /*postStart, postEnd*/ 192) {
			$: $$invalidate(1, somePosts = allPosts.slice(postStart, postEnd));
		}
	};

	$: numPerPage;

	return [
		currentPage,
		somePosts,
		numOfPages,
		incrementer,
		decrementer,
		allContent,
		postStart,
		postEnd
	];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { allContent: 5 });
	}
}

export default Component;