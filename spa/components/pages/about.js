/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from '../../web_modules/svelte/internal/index.mjs';

function create_fragment(ctx) {
	let section;
	let img;
	let img_src_value;
	let t0;
	let div;
	let p0;
	let t1;
	let t2;
	let p1;
	let t3;
	let t4;
	let p2;
	let t5;

	return {
		c() {
			section = element("section");
			img = element("img");
			t0 = space();
			div = element("div");
			p0 = element("p");
			t1 = text(/*body*/ ctx[1]);
			t2 = space();
			p1 = element("p");
			t3 = text(/*body2*/ ctx[2]);
			t4 = space();
			p2 = element("p");
			t5 = text(/*body3*/ ctx[3]);
			this.h();
		},
		l(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			img = claim_element(section_nodes, "IMG", { class: true, src: true, alt: true });
			t0 = claim_space(section_nodes);
			div = claim_element(section_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			p0 = claim_element(div_nodes, "P", {});
			var p0_nodes = children(p0);
			t1 = claim_text(p0_nodes, /*body*/ ctx[1]);
			p0_nodes.forEach(detach);
			t2 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", {});
			var p1_nodes = children(p1);
			t3 = claim_text(p1_nodes, /*body2*/ ctx[2]);
			p1_nodes.forEach(detach);
			t4 = claim_space(div_nodes);
			p2 = claim_element(div_nodes, "P", {});
			var p2_nodes = children(p2);
			t5 = claim_text(p2_nodes, /*body3*/ ctx[3]);
			p2_nodes.forEach(detach);
			div_nodes.forEach(detach);
			section_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(img, "class", "claxxWelder svelte-dk6o5i");
			if (img.src !== (img_src_value = "/assets/images/" + /*pic*/ ctx[0])) attr(img, "src", img_src_value);
			attr(img, "alt", "welding minifig");
			attr(div, "class", "content");
			attr(section, "class", "isAbout isGrid svelte-dk6o5i");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, img);
			append(section, t0);
			append(section, div);
			append(div, p0);
			append(p0, t1);
			append(div, t2);
			append(div, p1);
			append(p1, t3);
			append(div, t4);
			append(div, p2);
			append(p2, t5);
		},
		p(ctx, [dirty]) {
			if (dirty & /*pic*/ 1 && img.src !== (img_src_value = "/assets/images/" + /*pic*/ ctx[0])) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*body*/ 2) set_data(t1, /*body*/ ctx[1]);
			if (dirty & /*body2*/ 4) set_data(t3, /*body2*/ ctx[2]);
			if (dirty & /*body3*/ 8) set_data(t5, /*body3*/ ctx[3]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { pic } = $$props,
		{ body } = $$props,
		{ body2 } = $$props,
		{ body3 } = $$props;

	$$self.$$set = $$props => {
		if ("pic" in $$props) $$invalidate(0, pic = $$props.pic);
		if ("body" in $$props) $$invalidate(1, body = $$props.body);
		if ("body2" in $$props) $$invalidate(2, body2 = $$props.body2);
		if ("body3" in $$props) $$invalidate(3, body3 = $$props.body3);
	};

	return [pic, body, body2, body3];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { pic: 0, body: 1, body2: 2, body3: 3 });
	}
}

export default Component;